Wiki part:
->DataTables intro
	The front end data management is mostly done with a package imported with JS/CSS called dataTables for jQuery. This table along with Bootstrap's help of mobile first front-end framework allows for a very adaptive table. The current website has six hardcoded dataTables, 3 that represent the schedules of the 3 model teams, and 3 other tables that represent the conference stats, player stats, and team stats. Each of these tables are sortable and searchable because of the dataTable structure which can be seen in the multiple javaScript dataTable files. These files create a table and add in various functions to implement the tables to include the search and sortable features. A reference to DataTables is https://www.datatables.net/ which can be used to modify and add more to the tables. Another reference is to Bootstrap https://www.getbootstrap.com/ which can be useful to add addition front end design preferences to html.
->DataTables in-depth and how to set them up	
	All of the html files that are the tables within the site can be found in the GitHub under no_punt_intended/dataTables/data-tables-bootstrap-3/. This folder also includes css files for both bootstrap and dataTables, images for the ascending and descending images for the tables, and js files for jquery, bootstrap, and dataTables. The tables themselves include the schedules of various teams (purdue_schedule, clemson_schedule, and ut_schedule) and the various model tables (conferenceTable, teamTable, and playerTable). All of these tables are initialized by the call $(‘#nameOfTable’).DataTable(). The additional calls within DataTable are ({ "sDom": "<'row'<'col-xs-6'T><'col-xs-6'f>r>t<'row'<'col-xs-6'i><'col-xs-6'p>>",  and  “sPaginationType": "bootstrap" }); which allow for the search, sort ability, and pagination of the table. A side note is that these tables are inside a container as a class with the additional bootstrap modifications such as table-striped and table-bordered as usual.
->Linking to schedules/rosters 
	A next step for this project is to include links from within the table, such as the player’s schedule and team roster, which would return to the player’s team schedule for the viewer to see when the player will play. This will be done by including a link in the html code within the table that will link to the appropriate table similarly to the front end design of linking pages together. The issue will come with knowing the appropriate team roster or schedule to link to which most likely could be done by reading in the key value’s id of the player, such as Key:{Nick Jordan} teamValue:{University of Texas}. Then the link can take the viewer to the correct team roster or schedule. 
